package com.jordanpeterson.textly.messages;

import java.util.Arrays;
import java.util.List;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.view.View;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.jordanpeterson.textly.R;
import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;
import com.sinch.android.rtc.PushPair;
import com.sinch.android.rtc.messaging.Message;
import com.sinch.android.rtc.messaging.MessageClient;
import com.sinch.android.rtc.messaging.MessageClientListener;
import com.sinch.android.rtc.messaging.MessageDeliveryInfo;
import com.sinch.android.rtc.messaging.MessageFailureInfo;
import com.sinch.android.rtc.messaging.WritableMessage;

public class MessagingActivity extends Activity {
	private String mRecipientId;
	private EditText mMessageBodyField;
	private String mMessageBody;
	private MessageService.MessageServiceInterface messageService;
	private String mCurrentUserId;
	private ServiceConnection serviceConnection = new MyServiceConnection();
	private MessageClientListener messageClientListener = new MyMessageClientListener();
	private ListView messageList;
	private MessageChatAdapter messageChatAdapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.messaging_sinch);
		
		bindService(new Intent(this, MessageService.class), serviceConnection,
				BIND_AUTO_CREATE);

		// Get RecipientId from the intent
		Intent intent = getIntent();
		mRecipientId = intent.getStringExtra("RECIPIENT_ID");
		mCurrentUserId = ParseUser.getCurrentUser().getObjectId();

		messageList = (ListView) findViewById(R.id.listMessages);
		messageChatAdapter = new MessageChatAdapter(this);
		messageList.setAdapter(messageChatAdapter);

		mMessageBodyField = (EditText) findViewById(R.id.messageBodyField);

		// Listen for a click on the send button
		findViewById(R.id.sendButton).setOnClickListener(
				new View.OnClickListener() {

					@Override
					public void onClick(View view) {
						// Send The Message!
						mMessageBody = mMessageBodyField.getText().toString();
						if (mMessageBody.isEmpty()) {
							Toast.makeText(MessagingActivity.this,
									"Please enter a message", Toast.LENGTH_LONG)
									.show();
							return;
						}
						messageService.sendMessage(mRecipientId, mMessageBody);
						mMessageBodyField.setText("");

					}
				});

		String[] userIds = { mCurrentUserId, mRecipientId };
		ParseQuery<ParseObject> query = ParseQuery.getQuery("ParseMessage");
		query.whereContainedIn("senderId", Arrays.asList(userIds));
		query.whereContainedIn("recipientId", Arrays.asList(userIds));
		query.orderByAscending("createdAt");
		query.findInBackground(new FindCallback<ParseObject>() {

			@Override
			public void done(List<ParseObject> messageList, ParseException e) {
				if (e == null) {
					for (int i = 0; i < messageList.size(); i++) {
						WritableMessage message = new WritableMessage(
								messageList.get(i).get("recipientId")
										.toString(), messageList.get(i)
										.get("messageText").toString());
                              if (messageList.get(i).get("senderId").toString().equals(mCurrentUserId)) {
                            	  messageChatAdapter.addMessage(message, messageChatAdapter.DIRECTION_OUTGOING);
                            	  
                              }
                              else {
                            	  messageChatAdapter.addMessage(message, MessageChatAdapter.DIRECTION_INCOMING);
                              }
					}
				}

			}
		});

	}

	// Unbind the service when the activity is destroyed
	@Override
	protected void onDestroy() {
		messageService.removeMessageClientListener(messageClientListener);
		unbindService(serviceConnection);
		super.onDestroy();
	}

	private class MyServiceConnection implements ServiceConnection {

		@Override
		public void onServiceConnected(ComponentName componentName,
				IBinder iBinder) {
			messageService = (MessageService.MessageServiceInterface) iBinder;
			messageService.addMessageClientListener(messageClientListener);
		}

		@Override
		public void onServiceDisconnected(ComponentName componentName) {
			messageService = null;

		}

	}

	private class MyMessageClientListener implements MessageClientListener {

		@Override
		public void onMessageFailed(MessageClient client, Message message,
				MessageFailureInfo failureInfo) {
			// Toast.makeText(MessagingActivity.this, "Message failed to send.",
			// Toast.LENGTH_LONG).show();
			Toast.makeText(MessagingActivity.this,
					failureInfo.getSinchError().getMessage(), Toast.LENGTH_LONG)
					.show();

		}

		@Override
		public void onIncomingMessage(MessageClient client, Message message) {
			if (message.getSenderId().equals(mRecipientId)) {
				WritableMessage writeableMessage = new WritableMessage(message
						.getRecipientIds().get(0), message.getTextBody());
				messageChatAdapter.addMessage(writeableMessage,
						MessageChatAdapter.DIRECTION_INCOMING);
			}

		}

		@Override
		public void onMessageSent(MessageClient client, Message message,
				String recipientId) {
			// Display the message that was just sent

			// Later, I'll show you how to store the
			// Message in Parse, so you can retrieve and
			// display them every time the conversation is opened
			final WritableMessage writableMessage = new WritableMessage(message
					.getRecipientIds().get(0), message.getTextBody());
			// only add message to parse database if it doesn't already exist
			// there
			ParseQuery<ParseObject> query = ParseQuery.getQuery("ParseMessage");
			query.whereEqualTo("sinchId", message.getMessageId());
			query.findInBackground(new FindCallback<ParseObject>() {

				@Override
				public void done(List<ParseObject> messageList, ParseException e) {
					if (e == null) {
						if (messageList.size() == 0) {
							ParseObject parseMessage = new ParseObject(
									"ParseMessage");
							parseMessage.put("senderId", mCurrentUserId);
							parseMessage.put("recipientId", writableMessage
									.getRecipientIds().get(0));
							parseMessage.put("messageText",
									writableMessage.getTextBody());
							parseMessage.put("sinchId",
									writableMessage.getMessageId());
							parseMessage.saveInBackground();

							messageChatAdapter.addMessage(writableMessage,
									MessageChatAdapter.DIRECTION_OUTGOING);

						}
					}

				}
			});

		}

		@Override
		public void onMessageDelivered(MessageClient client,
				MessageDeliveryInfo deliveryInfo) {

		}

		// Don't worry about this right now
		@Override
		public void onShouldSendPushData(MessageClient client, Message message,
				List<PushPair> pushPairs) {

		}

	}
	

}
