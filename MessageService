package com.jordanpeterson.textly.messages;

import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;
import android.support.v4.content.LocalBroadcastManager;

import com.parse.ParseUser;
import com.sinch.android.rtc.ClientRegistration;
import com.sinch.android.rtc.Sinch;
import com.sinch.android.rtc.SinchClient;
import com.sinch.android.rtc.SinchClientListener;
import com.sinch.android.rtc.SinchError;
import com.sinch.android.rtc.messaging.MessageClient;
import com.sinch.android.rtc.messaging.MessageClientListener;
import com.sinch.android.rtc.messaging.WritableMessage;

public class MessageService extends Service implements SinchClientListener {

	private static final String APP_KEY = "41b8b8c8-bfb3-43a0-95c6-8eeb2f0e28e9";
	private static final String APP_SECRET = "XiK1skwnJU6l0sykEmeifQ==";
	private static final String ENVIRONMENT = "sandbox.sinch.com";
	private final MessageServiceInterface serviceInterface = new MessageServiceInterface();
	private SinchClient sinchClient = null;
	private MessageClient messageClient = null;
	private String currentUserId;
	private Intent broadcastIntent = new Intent("com.jordanpeterson.textly.messages.ListUsersActivity");
	private LocalBroadcastManager broadCaster;

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		// get the current user id from parse
		currentUserId = ParseUser.getCurrentUser().getObjectId();
		if (currentUserId != null && !isSinchClientStarted()) {
			startSinchClient(currentUserId);
		}
		
		broadCaster = LocalBroadcastManager.getInstance(this);
		
		return super.onStartCommand(intent, flags, startId);
	}

	private void startSinchClient(String userame) {
		sinchClient = Sinch.getSinchClientBuilder().context(this)
				.userId(userame).applicationKey(APP_KEY)
				.applicationSecret(APP_SECRET).environmentHost(ENVIRONMENT)
				.build();
		// this client listener requires that you define
		// a few methods below

		sinchClient.addSinchClientListener(this);

		// Messaging is "turned-on", but calling is not
		sinchClient.setSupportMessaging(true);
		sinchClient.setSupportActiveConnectionInBackground(true);

		sinchClient.checkManifest();
		sinchClient.start();

	}

	private boolean isSinchClientStarted() {
		return sinchClient != null && sinchClient.isStarted();
	}

	// The next 5 methods are for the sinch client listener

	@Override
	public void onClientFailed(SinchClient client, SinchError error) {
		broadcastIntent.putExtra("success", false);
		broadCaster.sendBroadcast(broadcastIntent);
		
		sinchClient = null;

	}

	@Override
	public void onClientStarted(SinchClient client) {
		broadcastIntent.putExtra("success", true);
		broadCaster.sendBroadcast(broadcastIntent);
		
		client.startListeningOnActiveConnection();
		messageClient = client.getMessageClient();

	}

	@Override
	public void onClientStopped(SinchClient client) {
		sinchClient = null;

	}

	@Override
	public void onRegistrationCredentialsRequired(SinchClient client,
			ClientRegistration clientRegistration) {
		// No code in here yet

	}

	@Override
	public void onLogMessage(int level, String area, String message) {
		// No code in here yet either

	}

	@Override
	public IBinder onBind(Intent intent) {
		return serviceInterface;
	}

	public void sendMessage(String recipientUserId, String textBody) {
		if (messageClient != null) {
			WritableMessage message = new WritableMessage(recipientUserId,
					textBody);
			messageClient.send(message);
		}
	}

	public void addMessageClientListener(MessageClientListener listener) {
		if (messageClient != null) {
			messageClient.addMessageClientListener(listener);
		}
	}

	public void removeMessageClientListener(MessageClientListener listener) {
		if (messageClient != null) {
			messageClient.removeMessageClientListener(listener);
		}
	}

	@Override
	public void onDestroy() {
		sinchClient.stopListeningOnActiveConnection();
		sinchClient.terminate();
	}

	// Public interface for ListUsersActivity & MessagingActivity
	public class MessageServiceInterface extends Binder {
		public void sendMessage(String recipientUserId, String textBody) {
			MessageService.this.sendMessage(recipientUserId, textBody);
		}

		public void addMessageClientListener(MessageClientListener listener) {
			MessageService.this.addMessageClientListener(listener);
		}

		public void removeMessageClientListener(MessageClientListener listener) {
			MessageService.this.removeMessageClientListener(listener);
		}

		public boolean isSinchClientStarted() {
			return MessageService.this.isSinchClientStarted();
		}
	}

}
