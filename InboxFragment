package com.jordanpeterson.textly.ui;

import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;

import com.jordanpeterson.textly.R;
import com.jordanpeterson.textly.adapters.MessageAdapter;
import com.jordanpeterson.textly.utils.ParseConstants;
import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;

public class InboxFragment extends ListFragment {

	protected List<ParseObject> mMessages;
	protected SwipeRefreshLayout mSwipeRefreshLayout;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragment_inbox, container,
				false);

		mSwipeRefreshLayout = (SwipeRefreshLayout) rootView
				.findViewById(R.id.SwipeToRefresh);
		mSwipeRefreshLayout.setOnRefreshListener(mOnRefreshListener);

		return rootView;
	}

	@Override
	public void onResume() {
		super.onResume();

		getActivity().setProgressBarIndeterminateVisibility(true);

		retrieveMessages();
	}

	private void retrieveMessages() {
		ParseQuery<ParseObject> query = new ParseQuery<ParseObject>(
				ParseConstants.CLASS_MESSAGES);
		query.whereEqualTo(ParseConstants.KEY_RECIPIENT_IDS, ParseUser
				.getCurrentUser().getObjectId());
		query.addDescendingOrder(ParseConstants.KEY_CREATED_AT);
		query.findInBackground(new FindCallback<ParseObject>() {
			@Override
			public void done(List<ParseObject> messages, ParseException e) {
				getActivity().setProgressBarIndeterminateVisibility(false);

				if (mSwipeRefreshLayout.isRefreshing()) {
					mSwipeRefreshLayout.setRefreshing(false);
				}

				if (e == null) {
					// We found messages!
					mMessages = messages;

					String[] usernames = new String[mMessages.size()];
					int i = 0;
					for (ParseObject message : mMessages) {
						usernames[i] = message
								.getString(ParseConstants.KEY_SENDER_NAME);
						i++;
					}
					if (getListView().getAdapter() == null) {
						MessageAdapter adapter = new MessageAdapter(
								getListView().getContext(), mMessages);
						setListAdapter(adapter);
					} else {
						// refill the adapter!
						((MessageAdapter) getListView().getAdapter())
								.refill(mMessages);
					}
				}
			}
		});
	}
	
	
	

	@Override
    public void onListItemClick(ListView l, View v, int position, long id) {
        super.onListItemClick(l, v, position, id);

        ParseObject message = mMessages.get(position);
        String messageType = message.getString(ParseConstants.KEY_FILE_TYPE);


        switch (messageType) {
            case ParseConstants.TYPE_TEXT_MESSAGE:
                String messageText = message.getString(ParseConstants.KEY_TEXT);
               
                // View Text Message
//                Toast.makeText(getActivity(), messageText, Toast.LENGTH_LONG).show();
                Intent textIntent = new Intent(getActivity(), ViewTextActivity.class);
                textIntent.putExtra(ParseConstants.KEY_TEXT, messageText);
                startActivity(textIntent);
               
                
                break;
            case ParseConstants.TYPE_IMAGE:
                ParseFile imageFile = message.getParseFile(ParseConstants.KEY_FILE);
                Uri imageFileUri = Uri.parse(imageFile.getUrl());

                // View Image
                Intent imageIntent = new Intent(getActivity(), ViewImageActivity.class);
                imageIntent.setData(imageFileUri);
                startActivity(imageIntent);
                break;
            case ParseConstants.TYPE_VIDEO:
                ParseFile videoFile = message.getParseFile(ParseConstants.KEY_FILE);
                Uri videoFileUri = Uri.parse(videoFile.getUrl());
                // View Video
                Intent videoIntent = new Intent(Intent.ACTION_VIEW, videoFileUri);
                videoIntent.setDataAndType(videoFileUri, "video/*");
                startActivity(videoIntent);
                break;
        }


		// Delete it!
		List<String> ids = message.getList(ParseConstants.KEY_RECIPIENT_IDS);

		if (ids.size() == 1) {
			// last recipient - delete the whole thing!
			message.deleteInBackground();
		} else {
			// remove the recipient and save
			ids.remove(ParseUser.getCurrentUser().getObjectId());

			ArrayList<String> idsToRemove = new ArrayList<String>();
			idsToRemove.add(ParseUser.getCurrentUser().getObjectId());

			message.removeAll(ParseConstants.KEY_RECIPIENT_IDS, idsToRemove);
			message.saveInBackground();
		}
	}

	protected OnRefreshListener mOnRefreshListener = new OnRefreshListener() {
		@Override
		public void onRefresh() {
			retrieveMessages();
		}
	};
}
